import {cleanup, fireEvent, render, screen} from "@testing-library/react";
import InfoCard from "../InfoCard";
import {configureStore} from "@reduxjs/toolkit";
import wishListReducer, {addItem, removeItem} from "../../utils/redux/wishListReducer";
import {Provider} from "react-redux";
import {initialState} from "../../utils/constants/testConstants";
import productsReducer from "../../utils/redux/productsReducer";
import userSelectionReducer from "../../utils/redux/userSelectionReducer";

//Globals
const mockProduct = initialState.productsStore.responseData[0];

//Test data
const infoCardContent: [number, string][] = [[0, "WAZ 2106, Red, 1986"], [1, "250 $"], [2, "JTDZN3EU4E3035524"]];

// Mock store
const mockStore = configureStore({
    reducer: {
        wishListStore: wishListReducer,
        productsStore: productsReducer,
        userSelectionStore: userSelectionReducer
    },
    preloadedState: initialState,
});

describe("InfoCard component", () => {
    afterEach(() => {
        cleanup();
    });

    test("Should render InfoCard component", () => {
        render(
            <Provider store={mockStore}>
                <InfoCard productProps={mockProduct}/>
            </Provider>
        );
        const card = screen.getByTestId("card");
        const cardActionArea = screen.getByTestId("card-action-area");
        const favouriteArea = screen.getByTestId("favourite-area");
        const checkbox = screen.getByTestId("checkbox");
        const cardMedia = screen.getByTestId("card-media");
        const cardContent = screen.getByTestId("card-content");
        const typographies = screen.getAllByTestId("typography");

        expect(card).toBeInTheDocument();
        expect(cardActionArea).toBeInTheDocument();
        expect(favouriteArea).toBeInTheDocument();
        expect(checkbox).toBeInTheDocument();
        expect(cardMedia).toBeInTheDocument();
        expect(cardContent).toBeInTheDocument();
        expect(typographies.length).toBe(3);
        typographies.forEach((e) => {
            expect(e).toBeInTheDocument();
        });
    });

    test.each(infoCardContent)("Should be displayed correct product information", (index, text) => {
        render(
            <Provider store={mockStore}>
                <InfoCard productProps={mockProduct}/>
            </Provider>
        );
        const typographies = screen.getAllByTestId("typography");
        expect(typographies[index]).toHaveTextContent(text);
    });

    describe("Given the mockProduct is not included in wishList", () => {
        test("Should display favourite area when mouseEnter and hide when mouseLeave", () => {
            render(
                <Provider store={mockStore}>
                    <InfoCard productProps={mockProduct}/>
                </Provider>
            );
            const card = screen.getByTestId("card");
            const favouriteArea = screen.getByTestId("favourite-area");
            const ioIosHeartEmpty = screen.getByTestId("io-ios-heart-empty");

            expect(ioIosHeartEmpty).toBeInTheDocument();
            expect(favouriteArea).toHaveStyle({opacity: 0});

            fireEvent.mouseEnter(card);
            expect(favouriteArea).toHaveStyle({opacity: 1});

            fireEvent.mouseLeave(card);
            expect(favouriteArea).toHaveStyle({opacity: 0});
        });

        test("Should display checked heart icon when is clicked and remain checked when mouseLeave", () => {
            render(
                <Provider store={mockStore}>
                    <InfoCard productProps={mockProduct}/>
                </Provider>
            );
            const card = screen.getByTestId("card");
            //Used getByRole the checkbox is automatically generated by MUI, and it doesn't have testId
            const checkbox = screen.getByRole("checkbox");
            const favouriteArea = screen.getByTestId("favourite-area");
            const ioIosHeartEmpty = screen.getByTestId("io-ios-heart-empty");

            fireEvent.click(checkbox);
            const ioIosHeart = screen.getByTestId("io-ios-heart");
            expect(ioIosHeart).toBeInTheDocument();

            fireEvent.mouseLeave(card);
            expect(favouriteArea).toHaveStyle({opacity: 1});
            expect(ioIosHeart).toBeInTheDocument();
            expect(ioIosHeartEmpty).not.toBeInTheDocument();
        });
    });

    describe("Given the mockProduct is included in wishList", () => {
        test("Should permanent display checked heart if redux store contains element's id and hide when isUnchecked", () => {
            mockStore.dispatch(addItem(1));
            expect(mockStore.getState().wishListStore.ids).toEqual([1]);

            render(
                <Provider store={mockStore}>
                    <InfoCard productProps={mockProduct}/>
                </Provider>
            );
            //Used getByRole the checkbox is automatically generated by MUI, and it doesn't have testId
            const checkbox = screen.getByRole("checkbox");
            const favouriteArea = screen.getByTestId("favourite-area");
            const ioIosHeart = screen.getByTestId("io-ios-heart");

            expect(ioIosHeart).toBeInTheDocument();
            expect(favouriteArea).toHaveStyle({opacity: 1});

            fireEvent.click(checkbox);
            const ioIosHeartEmpty = screen.getByTestId("io-ios-heart-empty");
            expect(ioIosHeartEmpty).toBeInTheDocument();
            expect(favouriteArea).toHaveStyle({opacity: 0});
            expect(ioIosHeart).not.toBeInTheDocument();

            mockStore.dispatch(removeItem(1));
            expect(mockStore.getState().wishListStore.ids).toEqual([]);
        });
    });
});
